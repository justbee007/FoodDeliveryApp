/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Restaurant.RestaurantDirectory;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;    
import java.util.Date;
import Business.Customer.CustomerDirectory;
/**
 *
 * @author raunak
 */
public class CustomerAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    EcoSystem sys;
    private UserAccount userAccount;
    RestaurantDirectory restdir;
    private WorkQueue queue;
    private CustomerDirectory cust;
    
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
//    public CustomerAreaJPanel(JPanel userProcessContainer, UserAccount account,WorkQueue queue, EcoSystem sys) {
//        initComponents();
//        
//        this.userProcessContainer = userProcessContainer;
//        this.sys = sys;
//        this.userAccount = account;
//        this.queue = queue;
//        //valueLabel.setText(enterprise.getName());
//        populateRequestTable();
//    }

    public CustomerAreaJPanel(JPanel userProcessContainer, UserAccount account, RestaurantDirectory restdir, WorkQueue queue, EcoSystem sys) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.queue = queue;
        this.userAccount = account;
        this.restdir = restdir;
        this.sys = sys;
        this.cust = sys.getCustomerDirectory();
        
        ArrayList<String> reste = new ArrayList<String>();
        reste = getRestuarantList(restdir);
        for(int i =0;i<reste.size();i++)
        {   Restaurant re = restdir.getResturantDirectory().get(i);  
            restuarantListjComboBox.addItem(re.getResturantName());
            
        }

        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
    }
    
    public void populateRequestTable(){
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        restuarantListjComboBox = new javax.swing.JComboBox<>();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        requestTestJButton.setText("Order");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Restuarant");

        restuarantListjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restuarantListjComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 276, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(restuarantListjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(requestTestJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(restuarantListjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(requestTestJButton)
                .addContainerGap(241, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
    DefaultTableModel mdl =  (DefaultTableModel) workRequestJTable.getModel();
    for(int i=0;i<workRequestJTable.getRowCount();i++)
    { System.out.println(workRequestJTable.getValueAt(i, 0));
    System.out.println("!!!!!!!!!!!!!!");
    System.out.println(workRequestJTable.getValueAt(i, 1));
    System.out.println("!!!!!!!!!!!!!!");
    System.out.println(workRequestJTable.getValueAt(i, 2));
    
      }
   int totalPrice=0;
    WorkRequest request = new WorkRequest(); 
    request.setOrderMenu(hashmapgenerator());
    HashMap<String, String> val =hashmapgenerator();
    for (Map.Entry mapElement : val.entrySet())
    { totalPrice = Integer.parseInt(mapElement.getValue().toString())+totalPrice;
    }
     request.setTotalPrice(totalPrice);
    request.setStatus("Ordered");
    request.setRestuarantName(restuarantListjComboBox.getSelectedItem().toString());
     SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");   
    Date date = new Date();  
    request.setRequestDate(formatter.format(date));
    request.setCustomerName(userAccount.getUsername());
//    cust = sys.getCustomerDirectory();
    request.setCustomerName(customerName(userAccount.getUsername(),cust));
   queue.addOrder(request);
   sys.setWorkQueue(queue);
   
    
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void restuarantListjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restuarantListjComboBoxActionPerformed
       ArrayList<String> reste = new ArrayList<String>();
       HashMap<String, String> val =null;
        reste = getRestuarantList(restdir);
        Restaurant re = null;
        DefaultTableModel mdl =  (DefaultTableModel) workRequestJTable.getModel();
        mdl.setRowCount(0);
        workRequestJTable.removeAll();
//        workRequestJTable.setModel(mdl);
        for(int i =0;i<reste.size();i++)
        {    re = restdir.getResturantDirectory().get(i);
        if(re.getResturantName().equals(restuarantListjComboBox.getSelectedItem().toString()))
        { System.out.println(re.getResturantName());
        System.out.println(restuarantListjComboBox.getSelectedItem().toString());
            val  = re.getMenu();
            if(val != null)
                    { 
        Object[] row = new Object[2];
        for (Map.Entry<String, String> set : val.entrySet()) {
		    //System.out.println(set.getKey() + " = " + set.getValue());
                    row[0] = set.getKey();
                    row[1] = set.getValue();
                    mdl.addRow(row);
		}
            
                    }
        }
            
           // System.out.println(restuarantListjComboBox.getSelectedItem().toString());
        }
       
    }//GEN-LAST:event_restuarantListjComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JComboBox<String> restuarantListjComboBox;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
private ArrayList <String> getRestuarantList(RestaurantDirectory restdir)
{ ArrayList <String> arrlist = new ArrayList<String>();
    for(int i=0; i<restdir.getResturantDirectory().size();i++)
    {  Restaurant re = restdir.getResturantDirectory().get(i);
        arrlist.add(re.getResturantName());
    }
return arrlist;
}
private HashMap<String, String> hashmapgenerator()
{ HashMap<String, String> val =new HashMap<>();;
DefaultTableModel mdl =  (DefaultTableModel) workRequestJTable.getModel();
System.out.println(workRequestJTable.getRowCount());
    for(int i=0;i<workRequestJTable.getRowCount();i++)
    { int price =0;
    int ItemTotalPrice=0;
        if(workRequestJTable.getValueAt(i, 2)==null)
    {
    }
    else
    {
        if(Integer.parseInt((workRequestJTable.getValueAt(i, 2)).toString())>0)    
    {  
         price =Math.round(Float.parseFloat(workRequestJTable.getValueAt(i, 1).toString()));
        ItemTotalPrice = Integer.parseInt((workRequestJTable.getValueAt(i, 2)).toString())*price;
        System.out.println(ItemTotalPrice);
        System.out.println(price);
        System.out.println("This is the total price"+i);
        String tota =String.valueOf(ItemTotalPrice);
        val.put(workRequestJTable.getValueAt(i, 0).toString(),String.valueOf(Integer.parseInt((workRequestJTable.getValueAt(i, 2)).toString())*price));
     }
    }
    }
return val;
}
private String customerName(String userName,CustomerDirectory cust)
{ String custname=null;
for(int i=0;i<cust.getCustomerDirectory().size();i++)
        { Customer cus = cust.getCustomerDirectory().get(i);
        if(cus.getUserid()==userName)
        { custname = cus.getName();
        
        }
        }
return custname;
}

}
